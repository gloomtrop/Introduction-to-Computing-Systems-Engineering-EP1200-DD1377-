// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
	DMux8Way(in= load ,sel= address[0..2],a= ram11,b= ram22,c= ram33,d=ram44 ,e= ram55,f= ram66,g= ram77,h= ram88);
	RAM8(in= in,load= ram11,address= address[3..5],out= out1);
	RAM8(in= in,load= ram22,address= address[3..5],out= out2);
	RAM8(in= in,load= ram33,address= address[3..5],out= out3);
	RAM8(in= in,load= ram44,address= address[3..5],out= out4);
	RAM8(in= in,load= ram55,address= address[3..5],out= out5);
	RAM8(in= in,load= ram66,address= address[3..5],out= out6);
	RAM8(in= in,load= ram77,address= address[3..5],out= out7);
	RAM8(in= in,load= ram88,address= address[3..5],out= out8);
	Mux8Way16(a= out1,b= out2,c= out3,d= out4,e= out5,f= out6,g= out7,h= out8,sel= address[0..2],out= out );
	
	
	 
	
}