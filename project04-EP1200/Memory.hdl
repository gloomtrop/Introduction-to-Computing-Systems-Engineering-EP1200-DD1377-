// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

// ANTECKNINGAR
// Använd samma struktur som använts för att bygga tidigare Minnen
// Bör användas:
// Mux16(a= ,b= ,sel= ,out= ); 
// DMux(in= ,sel= ,a= ,b= );
// Vidare:
// RAM16K har adress på 14 bit = (log2(16284))
// DELAR
// Screen(in= ,load= ,address= ,out= );
// RAM16K(in= ,load= ,address= ,out= );
// Keyboard(out= ); 

// KONVERTERING
// 16 - bit
// Hexa: 6000 --> Decimal: 24576 Binärt: 0110000000000000 > ogiltig adress
// Hexa: 4000 -5FFF -> Decimal: 16384 - 24575 (Skärmens adress)
// --> Binärt: 0100000000000000 - 0101111111111111
// Tangentbordets adress: 24576 --> Binärt: 0110000000000000
// RAM16K i binärt är mellan 0000000000000000 - 0011111111111111 
	
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
	// INPUT
	// Bör använda den binära strukturen för att skilja mellan minnen
	// Problem: adressen måste kollas för att hitta rätt
	
	// Om ad[13..14] = 11 :Keyboard ACTIVE
	// Om ad[13..14] = 10 :Screen ACTIVE
	// Om ad[13..14] = 01 eller 00 :RAM16K ACTIVE
	// ----------------------------------------------------------

	
	//Kollar om 15 biten är 0 (till RAM16K) eller 1 (till Skärm)
	DMux(in= load ,sel= address[14],a= ram1,b= screen1);
	
	// För RAM
	// De 14 första bitsen indikerar var i Screen mem som input ska vara (16K)
	RAM16K(in = in , load= ram1, address= address[0..13], out= outram1, out = outram2 ); //Två output som behövs vid Mux - output
	
	// För Skärm
	// De 13 första bitsen indikerar var i Screen mem som input ska vara (8K)
	Screen(in = in , load = screen1, address = address[0..12], out = outsc);
	
	// För Tangentbord 
	Keyboard(out= outpress);

	// Hantera Output
	// Problem: Ta reda på vilken del av Minnet som outputen ska tas från
	// Då RAM16K är aktiv för både 01 o 00 sätts RAM output till a och b pinnarna
	Mux4Way16(a= outram1,b= outram2,c= outsc,d= outpress,sel= address[13..14],out= out); 


}